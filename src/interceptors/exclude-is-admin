import {
  NestInterceptor,
  ExecutionContext,
  CallHandler,
  Injectable,
} from '@nestjs/common';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { Exclude, instanceToPlain } from 'class-transformer';

//@Injectable()
export class ExcludeIsAdminInterceptor implements NestInterceptor {
  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {
    return next.handle().pipe(
      map((data) => {
        // Excluir el campo isAdmin de la respuesta
        return instanceToPlain(data);
      }),
    );
  }
}
// esta es otra forma de resolver la devolucion sin el admin y password segun chat
/*import { CallHandler, ExecutionContext, Injectable, NestInterceptor } from '@nestjs/common';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

@Injectable()
export class HideCredentialInterceptor implements NestInterceptor {
  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {
    return next.handle().pipe(
      map((data) => {
        if (Array.isArray(data)) {
          return data.map(({ password, isAdmin, ...rest }) => rest);
        } else if (data && typeof data === 'object') {
          const { password, isAdmin, ...rest } = data;
          return rest;
        }
        return data;
      }),
    );
  }
}

 */

//* esta es la explicacion Array.isArray(data): Verifica si la respuesta es un array. Si lo es, aplica la destructuración a cada elemento.
// typeof data === 'object': Asegura que data es un objeto antes de intentar la destructuración, evitando errores en caso de que sea null u otro tipo.
// Destructuración: Extrae password e isAdmin y retorna el resto del objeto, eliminando las propiedades sensibles.
// Esta implementación es eficiente y te permite reutilizar el código para ocultar credenciales en diferentes rutas de tu aplicación. ¡Buen trabajo!